' Gambas module file

Public Function GetTags(sSource As String, Optional sToken As String) As Variant  
  Return GetFromDocker("repositories/" & sSource & "/tags", sToken)["results"]
End Function


' Public Function GetBranchHeadReference(sSource As String, sBranch As String, Optional sToken As String) As Variant
'   Return GetFromGitHub("repos/" & sSource & "/git/ref/heads/" & sBranch, sToken)
' End Function

' Public Function CreateTagReference(sDest As String, sTag As String, sSHA As String, Optional sToken As String) As Variant
'   Dim vBody As New Collection
'   vBody.Add(sSHA, "sha")
'   vBody.Add("refs/tags/" & sTag, "ref")
'   Return PostToGitHub("repos/" & sDest & "/git/refs", vBody, sToken)
' End Function


' Public Sub CreateTag(sSource As String, sDest As String, sTag As String, Optional sToken As String)
' 
'   Dim sSHA As String
'   Dim vRef As Variant
'   
'   vRef = GetBranchHeadReference(sDest, "master")
'   sSHA = vRef["object"]["sha"]
'   CreateTagReference(sDest, sTag, sSHA, sToken)
' 
' End Sub





' 
' Private Function PostToGitHub(sUrl As String, vData As Variant, Optional sToken As String) As Variant
'   
'   Dim hClient As HttpClient
'   Dim sBuffer As String
'   Dim arrHeaders As New String[]
'   Dim sData As String
' 
'   hClient = New HttpClient As "hClient"
'   hClient.URL = "https://api.github.com/" &/ sUrl
'   hClient.Async = False
'   hClient.Timeout = 10
'   arrHeaders.Add("Accept: application/vnd.github.v3+json")
'   If sToken Then arrHeaders.Add("Authorization: token " & sToken)
'   sData = JSON.ToString(vData)
'  
'   hClient.Post("application/json", sData, arrHeaders)
'   
' 
' 
'   'Print "Begin"
'   If hClient.Status < 0 Then
'     Return Null
'   Else
'     ' Success - read the data
'     If Lof(hClient) Then sBuffer = Read #hClient, Lof(hClient)
'     'Print sBuffer
'   End If
' 
'   Return JSON.FromString(sBuffer)  
'   
' End Function  



Private Function GetFromDocker(sUrl As String, Optional sToken As String) As Variant
  
  Dim hClient As HttpClient
  Dim sBuffer As String
  Dim arrHeaders As New String[]

  hClient = New HttpClient As "hClient"
  hClient.URL = "https://hub.docker.com/v2" &/ sUrl
  hClient.Async = False
  hClient.Timeout = 10
  If sToken Then arrHeaders.Add("Authorization: token " & sToken)
  
  hClient.Get(arrHeaders)
  

  'Print "Begin"
  If hClient.Status < 0 Then
    Return Null
  Else
    ' Success - read the data
    If Lof(hClient) Then sBuffer = Read #hClient, Lof(hClient)
    'Print sBuffer
  End If

  Return JSON.FromString(sBuffer)  
  
End Function  
  


'#!/bin/bash
'
'set - e
'
'#set username And password
'UNAME = "<^>username<^^>"
'UPASS = "<^>password<^^>"
'
'#get token To be able To talk To Docker Hub
'TOKEN = $(curl - s - H "Content-Type: application/json" - X POST - d '{"username": "'${UNAME}'", "password": "'${UPASS}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
'
'#get list Of namespaces accessible by user(Not In Use right Now)
'#NAMESPACES = $(curl - s - H "Authorization: JWT ${TOKEN}" https: / / hub.docker.com / v2 / repositories / namespaces / | jq -r '.namespaces|.[]')
'
'#get list Of repos For that user account
'REPO_LIST = $(curl - s - H "Authorization: JWT ${TOKEN}" https: / / hub.docker.com / v2 / repositories / $ {UNAME} / Print page_size = 10000 | jq -r '.results|.[]|.name')
'
'#build a list Of all images & tags
'For i In $ {REPO_LIST}
'Do
'  #get tags For repo
'  IMAGE_TAGS = $(curl - s - H "Authorization: JWT ${TOKEN}" https: / / hub.docker.com / v2 / repositories / $ {UNAME} / $ {i} / tags / Print page_size = 10000 | jq -r '.results|.[]|.name')
'
'  #build a list Of images From tags
'  For j In $ {IMAGE_TAGS}
'  Do
'    #add Each tag To list
'    FULL_IMAGE_LIST = "${FULL_IMAGE_LIST} ${UNAME}/${i}:${j}"
'  done
'done
'
'#Output list Of all docker images
'For i In $ {FULL_IMAGE_LIST}
'Do
'  echo $ {i}
'done  